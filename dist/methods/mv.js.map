{"version":3,"file":"mv.js","sourceRoot":"","sources":["../../src/methods/mv.ts"],"names":[],"mappings":";;AAAA,gCAAwI;AACxI,6BAAuB;AACvB,6BAAuB;AACvB,2BAAqB;AACrB,mCAA6B;AAC7B,iDAA2C;AAE3C,YAA4B,IAAI,EAAE,IAAqB,EAAE,EAAmB,EAAE,SAAwC;IACpH,IAAI,GAAG,IAAI,GAAG,EAAE,CAAA;IAChB,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;IAEZ,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,EAAE,IAAI,eAAQ,CAAC,IAAI,CAAC,IAAI,eAAQ,CAAC,EAAE,CAAC,CAAC;QAAE,OAAO,gBAAS,CAAC,+BAAwB,CAAC,CAAA;IACvG,IAAI,IAAI,KAAK,EAAE;QAAE,OAAM;IAEvB,IAAM,MAAM,GAAG,aAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;IAC5B,IAAM,QAAQ,GAAG,aAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;IAChC,IAAM,QAAQ,GAAG,aAAG,CAAC,IAAI,EAAE,EAAE,GAAG,KAAK,CAAC,CAAA;IACtC,IAAM,SAAS,GAAW,CAAC,CAAC,qBAAc,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAA;IAC5E,IAAM,OAAO,GAAW,CAAC,CAAC,qBAAc,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAA;IAExE,IAAI,cAAO,CAAC,QAAQ,CAAC,EAAE;QACrB,IAAI,CAAC,SAAS;YAAE,MAAM,IAAI,KAAK,CAAC,yBAAkB,CAAC,CAAA;QACnD,IAAM,aAAa,GAAG,uBAAa,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,uBAAa,CAAC,EAAE,GAAG,KAAK,CAAC,CAAA;QAE/E,gBAAM,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAA;QACrC,IAAI,aAAa,EAAE;YACjB,eAAQ,CAAC,QAAQ,EAAE,SAAS,GAAG,CAAC,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YAC7D,OAAM;SACP;QAED,YAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;QAEd,OAAM;KACP;IAED,IAAI,CAAC,eAAQ,CAAC,MAAM,CAAC,EAAE;QACrB,MAAM,IAAI,KAAK,CAAC,MAAI,EAAE,WAAM,MAAM,yBAAsB,CAAC,CAAA;KAC1D;IAED,aAAG,CAAC,IAAI,EAAE,EAAE,GAAG,GAAG,GAAG,IAAI,EAAE,QAAQ,CAAC,CAAA;IACpC,YAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;AAChB,CAAC;AAlCD,qBAkCC","sourcesContent":["import { THE_PARAMETER_IS_ILLEGAL, DIRECTION_REQUIRED, isObject, isArray, isString, showError, delValue, combingPathKey } from '../util'\nimport get from './get'\nimport set from './set'\nimport rm from './rm'\nimport insert from './insert'\nimport normalizePath from './normalizePath'\n\nexport default function mv (data, from: string | number, to: string | number, direction: 'before' | 'after' | 'append'): void {\n  from = from + ''\n  to = to + ''\n\n  if (!(data && from && to && isString(from) && isString(to))) return showError(THE_PARAMETER_IS_ILLEGAL)\n  if (from === to) return\n\n  const DataTo = get(data, to)\n  const dataFrom = get(data, from)\n  const parentTo = get(data, to + '/..')\n  const fromIndex: number = +(combingPathKey({ path: from }).keys.pop() || '')\n  const toIndex: number = +(combingPathKey({ path: to }).keys.pop() || '')\n\n  if (isArray(parentTo)) {\n    if (!direction) throw new Error(DIRECTION_REQUIRED)\n    const isInSameArray = normalizePath(from + '/..') === normalizePath(to + '/..')\n\n    insert(data, to, dataFrom, direction)\n    if (isInSameArray) {\n      delValue(parentTo, fromIndex + (toIndex > fromIndex ? 0 : 1))\n      return\n    }\n\n    rm(data, from)\n\n    return\n  }\n\n  if (!isObject(DataTo)) {\n    throw new Error(`'${to}': ${DataTo} is primitive values`)\n  }\n\n  set(data, to + '/' + from, dataFrom)\n  rm(data, from)\n}\n"]}