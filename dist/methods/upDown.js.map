{"version":3,"file":"upDown.js","sourceRoot":"","sources":["../../src/methods/upDown.ts"],"names":[],"mappings":";;AAAA,gCAAwI;AACxI,6BAAuB;AAEvB,gBAAiB,IAAI,EAAE,IAAI,EAAE,SAAiB,EAAE,GAAO;IAAP,oBAAA,EAAA,OAAO;IACrD,IAAI,GAAG,IAAI,GAAG,EAAE,CAAA;IAChB,IAAI,CAAC,CAAC,gBAAS,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;QAAE,OAAO,gBAAS,CAAC,+BAAwB,CAAC,CAAA;IAC5E,IAAI,CAAC,CAAC,IAAI,CAAC;QAAE,OAAO,gBAAS,CAAC,+BAAwB,CAAC,CAAA;IAEvD,IAAM,MAAM,GAAG,aAAG,CAAC,IAAI,EAAE,IAAI,GAAG,KAAK,CAAC,CAAA;IACtC,IAAI,CAAC,cAAO,CAAC,MAAM,CAAC;QAAE,OAAO,gBAAS,CAAC,oBAAa,CAAC,CAAA;IACrD,IAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAA;IACzB,IAAM,KAAK,GAAG,CAAC,CAAC,qBAAc,CAAC,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAA;IAC1D,IAAI,CAAC,gBAAS,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,GAAG,GAAG,CAAC;QAAE,OAAM;IAChD,IAAI,OAAO,GAAG,KAAK,GAAG,SAAS,GAAG,GAAG,CAAA;IACrC,IAAI,OAAO,IAAI,CAAC;QAAE,OAAO,GAAG,CAAC,CAAA;IAC7B,IAAI,OAAO,GAAG,GAAG,GAAG,CAAC;QAAE,OAAO,GAAG,GAAG,GAAG,CAAC,CAAA;IAExC,IAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;IAC9B,eAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;IACvB,kBAAW,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAA;AACxC,CAAC;AAED,YAAoB,IAAI,EAAE,IAAqB,EAAE,GAAY;IAC3D,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;AAC7B,CAAC;AAFD,gBAEC;AAED,cAAsB,IAAI,EAAE,IAAqB,EAAE,GAAY;IAC7D,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,CAAC,CAAA;AAC5B,CAAC;AAFD,oBAEC","sourcesContent":["import { THE_PARAMETER_IS_ILLEGAL, isArray, MUST_BE_ARRAY, showError, combingPathKey, isNatural , delValue, insertValue } from '../util'\nimport get from './get'\n\nfunction upDown (data, path, direction: 1 | -1, gap = 1) {\n  path = path + ''\n  if (!(isNatural(gap) && gap > 0)) return showError(THE_PARAMETER_IS_ILLEGAL)\n  if (!(data)) return showError(THE_PARAMETER_IS_ILLEGAL)\n\n  const parent = get(data, path + '/..')\n  if (!isArray(parent)) return showError(MUST_BE_ARRAY)\n  const len = parent.length\n  const index = +(combingPathKey({ path }).keys.pop() || '')\n  if (!isNatural(index) || index > len - 1) return\n  let toIndex = index + direction * gap\n  if (toIndex <= 0) toIndex = 0\n  if (toIndex > len - 1) toIndex = len - 1\n\n  const fromData = parent[index]\n  delValue(parent, index)\n  insertValue(parent, toIndex, fromData)\n}\n\nexport function up (data, path: string | number, gap?: number): void {\n  upDown(data, path, -1, gap)\n}\n\nexport function down (data, path: string | number, gap?: number): void {\n  upDown(data, path, 1, gap)\n}\n"]}