{"version":3,"file":"walk.js","sourceRoot":"","sources":["../../src/methods/walk.ts"],"names":[],"mappings":";;AAAA,gCAAiD;AACjD,2CAAqC;AACrC,iDAA2C;AAE3C,uBAAwB,GAAG,EAAE,QAAQ;IACnC,IAAI,OAAO,GAAG,KAAK,CAAA;IACnB;QACE,OAAO,GAAG,IAAI,CAAA;IAChB,CAAC;IAED,KAAiB,UAAgB,EAAhB,KAAA,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAhB,cAAgB,EAAhB,IAAgB;QAA5B,IAAI,IAAI,SAAA;QACX,IAAI,OAAO;YAAE,MAAK;QAClB,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,MAAM,QAAA,EAAE,CAAC,CAAA;KAC3C;AACH,CAAC;AAeD,cAA8B,GAAQ,EAAG,YAAiC,EAAG,WAAgC;IAA/E,oBAAA,EAAA,QAAQ;IAAG,6BAAA,EAAA,eAA6B,WAAI;IAAG,4BAAA,EAAA,cAA4B,WAAI;IAC3G,IAAI,oBAAU,CAAC,GAAG,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAA;IAEnE,IAAI,IAAI,GAAa,EAAE,CAAA;IACvB,eAAgB,GAAG;QACjB,aAAa,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,EAAU;gBAAR,kBAAM;YAC5C,IAAI,OAAO,GAAG,KAAK,CAAA;YAEnB;gBACE,MAAM,EAAE,CAAA;gBACR,OAAO,GAAG,IAAI,CAAA;gBACd,IAAI,cAAO,CAAC,MAAM,CAAC,EAAE;oBACnB,IAAI,CAAC,GAAG,EAAE,CAAA;iBACX;YACH,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YACd,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,uBAAa,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAA;YAC9E,IAAI,CAAC,GAAG,EAAE,CAAA;YACV,IAAI,eAAQ,CAAC,GAAG,CAAC,EAAE;gBACjB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;gBACd,IAAI,OAAO;oBAAE,OAAM;gBACnB,KAAK,CAAC,GAAG,CAAC,CAAA;gBACV,IAAI,CAAC,GAAG,EAAE,CAAA;gBACV,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,uBAAa,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAA;aAC9E;QACH,CAAC,CAAC,CAAA;QACF,OAAO,GAAG,CAAA;IACZ,CAAC;IAED,OAAO,KAAK,CAAC,GAAG,CAAC,CAAA;AACnB,CAAC;AA/BD,uBA+BC","sourcesContent":["import { noop, isArray, isObject } from '../util'\nimport isCircular from './isCircular'\nimport normalizePath from './normalizePath'\n\nfunction objectForeach (obj, callback) {\n  let isBreak = false\n  function _break () {\n    isBreak = true\n  }\n\n  for (let prop of Object.keys(obj)) {\n    if (isBreak) break\n    callback(obj[prop], prop, obj, { _break })\n  }\n}\n\n/**\n * [walk description] 遍历一个对象, 提供入栈和出栈两个回调, 操作原对象\n * @author haozi\n * @param  {object} obj          [description]\n * @param  {[type]} descentionFn [description]\n * @param  {[type]} ascentionFn  [description]\n * @return {[type]}              [description]\n */\n\nexport interface WalkCallback {\n  (val, key: string, parent, { _break, path }): void\n}\n\nexport default function walk (obj = {} , descentionFn: WalkCallback = noop , ascentionFn: WalkCallback = noop): void {\n  if (isCircular(obj)) throw new Error(`obj is a circular structure`)\n\n  let path: string[] = []\n  function _walk (obj) {\n    objectForeach(obj, (val, key, parent, { _break }) => {\n      let isBreak = false\n\n      function _gBreak () {\n        _break()\n        isBreak = true\n        if (isArray(parent)) {\n          path.pop()\n        }\n      }\n\n      path.push(key)\n      descentionFn(val, key, parent, { path: normalizePath(path), _break: _gBreak })\n      path.pop()\n      if (isObject(val)) {\n        path.push(key)\n        if (isBreak) return\n        _walk(val)\n        path.pop()\n        ascentionFn(val, key, parent, { path: normalizePath(path), _break: _gBreak })\n      }\n    })\n    return obj\n  }\n\n  return _walk(obj)\n}\n"]}